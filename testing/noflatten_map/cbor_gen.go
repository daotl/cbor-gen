// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package noflatten_map

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	testing "github.com/daotl/cbor-gen/testing"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *EmbeddingStructOne) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	if n_, err := w.Write([]byte{166}); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Foo (string) (string)
	if len("Foo") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Foo\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Foo"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Foo")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if len("Stuff") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Stuff\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Stuff"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Stuff")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len("Others") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Others\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Others"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Others")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len("SignedOthers") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SignedOthers\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SignedOthers"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SignedOthers")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}

	// t.SimpleTypeOne (testing.SimpleTypeOne) (struct)
	if len("SimpleTypeOne") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SimpleTypeOne\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SimpleTypeOne"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SimpleTypeOne")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.SimpleTypeOne.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.SimpleTypeTwo (testing.SimpleTypeTwo) (struct)
	if len("SimpleTypeTwo") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SimpleTypeTwo\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SimpleTypeTwo"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SimpleTypeTwo")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.SimpleTypeTwo.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *EmbeddingStructOne) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructOne{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajMap {
		return bytesRead, fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("EmbeddingStructOne: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, read, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			name = string(sval)
		}

		switch name {
		// t.Foo (string) (string)
		case "Foo":

			{
				sval, read, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read

				t.Foo = string(sval)
			}
			// t.Stuff (testing.SimpleTypeTwo) (struct)
		case "Stuff":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.Stuff = new(testing.SimpleTypeTwo)
					if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}
			// t.Others ([]uint64) (slice)
		case "Others":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Others = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
				}
				bytesRead += read

				if maj != cbg.MajUnsignedInt {
					return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
				}

				t.Others[i] = uint64(val)
			}

			// t.SignedOthers ([]int64) (slice)
		case "SignedOthers":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.SignedOthers = make([]int64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
					var extraI int64
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read
					switch maj {
					case cbg.MajUnsignedInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 positive overflow")
						}
					case cbg.MajNegativeInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 negative oveflow")
						}
						extraI = -1 - extraI
					default:
						return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
					}

					t.SignedOthers[i] = int64(extraI)
				}
			}

			// t.SimpleTypeOne (testing.SimpleTypeOne) (struct)
		case "SimpleTypeOne":

			{

				if read, err := t.SimpleTypeOne.UnmarshalCBOR(br); err != nil {
					return bytesRead, xerrors.Errorf("unmarshaling t.SimpleTypeOne: %w", err)
				} else {
					bytesRead += read
				}

			}
			// t.SimpleTypeTwo (testing.SimpleTypeTwo) (struct)
		case "SimpleTypeTwo":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.SimpleTypeTwo = new(testing.SimpleTypeTwo)
					if read, err := t.SimpleTypeTwo.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.SimpleTypeTwo pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if read, err := cbg.ScanForLinks(r, func(cid.Cid) {}); err == nil {
				bytesRead += read
			}
		}
	}

	return bytesRead, nil
}
func (t *EmbeddingStructTwo) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	if n_, err := w.Write([]byte{170}); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Dog (string) (string)
	if len("Dog") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Dog\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Dog"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Dog")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Dog) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Dog was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Dog))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Dog)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Foo (string) (string)
	if len("Foo") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Foo\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Foo"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Foo")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Test ([][]uint8) (slice)
	if len("Test") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Test\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Test"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Test")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Test) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Test was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Test))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Test {
		if len(v) > cbg.ByteArrayMaxLen {
			return n, xerrors.Errorf("Byte array in field v was too long")
		}

		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return n + n_, err
		} else {
			n += n_
		}

		if n_, err := w.Write(v[:]); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if len("Stuff") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Stuff\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Stuff"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Stuff")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)
	if len("Value") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Value\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Value"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Value")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len("Others") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Others\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Others"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Others")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len("Numbers") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Numbers\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Numbers"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Numbers")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Numbers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Numbers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Numbers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Numbers {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len("SignedOthers") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SignedOthers\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SignedOthers"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SignedOthers")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}

	// t.SimpleTypeOne (testing.SimpleTypeOne) (struct)
	if len("SimpleTypeOne") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SimpleTypeOne\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SimpleTypeOne"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SimpleTypeOne")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.SimpleTypeOne.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.EmbeddingStructOne (noflatten_map.EmbeddingStructOne) (struct)
	if len("EmbeddingStructOne") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"EmbeddingStructOne\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("EmbeddingStructOne"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("EmbeddingStructOne")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.EmbeddingStructOne.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *EmbeddingStructTwo) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructTwo{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajMap {
		return bytesRead, fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("EmbeddingStructTwo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, read, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			name = string(sval)
		}

		switch name {
		// t.Dog (string) (string)
		case "Dog":

			{
				sval, read, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read

				t.Dog = string(sval)
			}
			// t.Foo (string) (string)
		case "Foo":

			{
				sval, read, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read

				t.Foo = string(sval)
			}
			// t.Test ([][]uint8) (slice)
		case "Test":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Test: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Test = make([][]uint8, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error

					maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read

					if extra > cbg.ByteArrayMaxLen {
						return bytesRead, fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
					}
					if maj != cbg.MajByteString {
						return bytesRead, fmt.Errorf("expected byte array")
					}

					if extra > 0 {
						t.Test[i] = make([]uint8, extra)
					}

					if read, err := io.ReadFull(br, t.Test[i][:]); err != nil {
						return bytesRead, err
					} else {
						bytesRead += read
					}
				}
			}

			// t.Stuff (testing.SimpleTypeTwo) (struct)
		case "Stuff":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.Stuff = new(testing.SimpleTypeTwo)
					if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}
			// t.Value (uint64) (uint64)
		case "Value":

			{

				maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read
				if maj != cbg.MajUnsignedInt {
					return bytesRead, fmt.Errorf("wrong type for uint64 field")
				}
				t.Value = uint64(extra)

			}
			// t.Others ([]uint64) (slice)
		case "Others":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Others = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
				}
				bytesRead += read

				if maj != cbg.MajUnsignedInt {
					return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
				}

				t.Others[i] = uint64(val)
			}

			// t.Numbers ([]testing.NamedNumber) (slice)
		case "Numbers":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Numbers: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Numbers = make([]testing.NamedNumber, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, xerrors.Errorf("failed to read uint64 for t.Numbers slice: %w", err)
				}
				bytesRead += read

				if maj != cbg.MajUnsignedInt {
					return bytesRead, xerrors.Errorf("value read for array t.Numbers was not a uint, instead got %d", maj)
				}

				t.Numbers[i] = testing.NamedNumber(val)
			}

			// t.SignedOthers ([]int64) (slice)
		case "SignedOthers":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.SignedOthers = make([]int64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
					var extraI int64
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read
					switch maj {
					case cbg.MajUnsignedInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 positive overflow")
						}
					case cbg.MajNegativeInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 negative oveflow")
						}
						extraI = -1 - extraI
					default:
						return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
					}

					t.SignedOthers[i] = int64(extraI)
				}
			}

			// t.SimpleTypeOne (testing.SimpleTypeOne) (struct)
		case "SimpleTypeOne":

			{

				if read, err := t.SimpleTypeOne.UnmarshalCBOR(br); err != nil {
					return bytesRead, xerrors.Errorf("unmarshaling t.SimpleTypeOne: %w", err)
				} else {
					bytesRead += read
				}

			}
			// t.EmbeddingStructOne (noflatten_map.EmbeddingStructOne) (struct)
		case "EmbeddingStructOne":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.EmbeddingStructOne = new(EmbeddingStructOne)
					if read, err := t.EmbeddingStructOne.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.EmbeddingStructOne pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if read, err := cbg.ScanForLinks(r, func(cid.Cid) {}); err == nil {
				bytesRead += read
			}
		}
	}

	return bytesRead, nil
}
func (t *EmbeddingStructThree) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	if n_, err := w.Write([]byte{173}); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Dog (string) (string)
	if len("Dog") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Dog\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Dog"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Dog")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Dog) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Dog was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Dog))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Dog)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Foo (string) (string)
	if len("Foo") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Foo\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Foo"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Foo")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Test ([][]uint8) (slice)
	if len("Test") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Test\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Test"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Test")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Test) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Test was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Test))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Test {
		if len(v) > cbg.ByteArrayMaxLen {
			return n, xerrors.Errorf("Byte array in field v was too long")
		}

		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return n + n_, err
		} else {
			n += n_
		}

		if n_, err := w.Write(v[:]); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Pizza (uint64) (uint64)
	if len("Pizza") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Pizza\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Pizza"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Pizza")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if t.Pizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.Pizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if len("Stuff") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Stuff\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Stuff"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Stuff")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)
	if len("Value") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Value\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Value"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Value")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len("Binary") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Binary\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Binary"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Binary")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len("Others") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Others\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Others"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Others")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len("Numbers") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Numbers\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Numbers"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Numbers")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Numbers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Numbers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Numbers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Numbers {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len("Arrrrrghay") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"Arrrrrghay\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Arrrrrghay"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("Arrrrrghay")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.Arrrrrghay) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Arrrrrghay was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Arrrrrghay))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Arrrrrghay {
		if n_, err := v.MarshalCBOR(w); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.PointyPizza (testing.NamedNumber) (uint64)
	if len("PointyPizza") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"PointyPizza\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("PointyPizza"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("PointyPizza")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if t.PointyPizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.PointyPizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len("SignedOthers") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"SignedOthers\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("SignedOthers"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("SignedOthers")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}

	// t.EmbeddingStructTwo (noflatten_map.EmbeddingStructTwo) (struct)
	if len("EmbeddingStructTwo") > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field \"EmbeddingStructTwo\" was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("EmbeddingStructTwo"))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string("EmbeddingStructTwo")); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := t.EmbeddingStructTwo.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *EmbeddingStructThree) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructThree{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajMap {
		return bytesRead, fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("EmbeddingStructThree: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, read, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			name = string(sval)
		}

		switch name {
		// t.Dog (string) (string)
		case "Dog":

			{
				sval, read, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read

				t.Dog = string(sval)
			}
			// t.Foo (string) (string)
		case "Foo":

			{
				sval, read, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read

				t.Foo = string(sval)
			}
			// t.Test ([][]uint8) (slice)
		case "Test":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Test: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Test = make([][]uint8, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error

					maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read

					if extra > cbg.ByteArrayMaxLen {
						return bytesRead, fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
					}
					if maj != cbg.MajByteString {
						return bytesRead, fmt.Errorf("expected byte array")
					}

					if extra > 0 {
						t.Test[i] = make([]uint8, extra)
					}

					if read, err := io.ReadFull(br, t.Test[i][:]); err != nil {
						return bytesRead, err
					} else {
						bytesRead += read
					}
				}
			}

			// t.Pizza (uint64) (uint64)
		case "Pizza":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read
					if maj != cbg.MajUnsignedInt {
						return bytesRead, fmt.Errorf("wrong type for uint64 field")
					}
					typed := uint64(extra)
					t.Pizza = &typed
				}

			}
			// t.Stuff (testing.SimpleTypeTwo) (struct)
		case "Stuff":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.Stuff = new(testing.SimpleTypeTwo)
					if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}
			// t.Value (uint64) (uint64)
		case "Value":

			{

				maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, err
				}
				bytesRead += read
				if maj != cbg.MajUnsignedInt {
					return bytesRead, fmt.Errorf("wrong type for uint64 field")
				}
				t.Value = uint64(extra)

			}
			// t.Binary ([]uint8) (slice)
		case "Binary":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.ByteArrayMaxLen {
				return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return bytesRead, fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Binary = make([]uint8, extra)
			}

			if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
				return bytesRead, err
			} else {
				bytesRead += read
			}
			// t.Others ([]uint64) (slice)
		case "Others":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Others = make([]uint64, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
				}
				bytesRead += read

				if maj != cbg.MajUnsignedInt {
					return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
				}

				t.Others[i] = uint64(val)
			}

			// t.Numbers ([]testing.NamedNumber) (slice)
		case "Numbers":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Numbers: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Numbers = make([]testing.NamedNumber, extra)
			}

			for i := 0; i < int(extra); i++ {

				maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
				if err != nil {
					return bytesRead, xerrors.Errorf("failed to read uint64 for t.Numbers slice: %w", err)
				}
				bytesRead += read

				if maj != cbg.MajUnsignedInt {
					return bytesRead, xerrors.Errorf("value read for array t.Numbers was not a uint, instead got %d", maj)
				}

				t.Numbers[i] = testing.NamedNumber(val)
			}

			// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
		case "Arrrrrghay":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.Arrrrrghay: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra != 3 {
				return bytesRead, fmt.Errorf("expected array to have 3 elements")
			}

			t.Arrrrrghay = [3]testing.SimpleTypeOne{}

			for i := 0; i < int(extra); i++ {

				var v testing.SimpleTypeOne
				if read, err := v.UnmarshalCBOR(br); err != nil {
					return bytesRead, err
				} else {
					bytesRead += read
				}

				t.Arrrrrghay[i] = v
			}

			// t.PointyPizza (testing.NamedNumber) (uint64)
		case "PointyPizza":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read
					if maj != cbg.MajUnsignedInt {
						return bytesRead, fmt.Errorf("wrong type for uint64 field")
					}
					typed := testing.NamedNumber(extra)
					t.PointyPizza = &typed
				}

			}
			// t.SignedOthers ([]int64) (slice)
		case "SignedOthers":

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.MaxLength {
				return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return bytesRead, fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.SignedOthers = make([]int64, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
					var extraI int64
					if err != nil {
						return bytesRead, err
					}
					bytesRead += read
					switch maj {
					case cbg.MajUnsignedInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 positive overflow")
						}
					case cbg.MajNegativeInt:
						extraI = int64(extra)
						if extraI < 0 {
							return bytesRead, fmt.Errorf("int64 negative oveflow")
						}
						extraI = -1 - extraI
					default:
						return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
					}

					t.SignedOthers[i] = int64(extraI)
				}
			}

			// t.EmbeddingStructTwo (noflatten_map.EmbeddingStructTwo) (struct)
		case "EmbeddingStructTwo":

			{

				b, err := br.ReadByte()
				if err != nil {
					return bytesRead, err
				}
				bytesRead++
				if b != cbg.CborNull[0] {
					if err := br.UnreadByte(); err != nil {
						return bytesRead, err
					}
					bytesRead--
					t.EmbeddingStructTwo = new(EmbeddingStructTwo)
					if read, err := t.EmbeddingStructTwo.UnmarshalCBOR(br); err != nil {
						return bytesRead, xerrors.Errorf("unmarshaling t.EmbeddingStructTwo pointer: %w", err)
					} else {
						bytesRead += read
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if read, err := cbg.ScanForLinks(r, func(cid.Cid) {}); err == nil {
				bytesRead += read
			}
		}
	}

	return bytesRead, nil
}
