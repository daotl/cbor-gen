// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package flatten_tuple

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	testing "github.com/daotl/cbor-gen/testing"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *EmbeddingStructOne) InitNilEmbeddedStruct() {
	if t != nil {
		if t.SimpleTypeTwo == nil {
			t.SimpleTypeTwo = &SimpleTypeTwo{}
		}
		t.SimpleTypeTwo.InitNilEmbeddedStruct()
	}
}

var lengthBufEmbeddingStructOne = []byte{148}

func (t *EmbeddingStructOne) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbeddingStructOne); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U8 (uint8) (uint8)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U8)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U16 (uint16) (uint16)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U16)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U32 (uint32) (uint32)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U32)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I16 (int16) (int16)
	if t.I16 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I32 (int32) (int32)
	if t.I32 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Test ([][]uint8) (slice)
	if len(t.Test) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Test was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Test))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Test {
		if len(v) > cbg.ByteArrayMaxLen {
			return n, xerrors.Errorf("Byte array in field v was too long")
		}

		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return n + n_, err
		} else {
			n += n_
		}

		if n_, err := w.Write(v[:]); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Dog (string) (string)
	if len(t.Dog) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Dog was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Dog))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Dog)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len(t.Numbers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Numbers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Numbers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Numbers {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Pizza (uint64) (uint64)

	if t.Pizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.Pizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.PointyPizza (testing.NamedNumber) (uint64)

	if t.PointyPizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.PointyPizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len(t.Arrrrrghay) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Arrrrrghay was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Arrrrrghay))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Arrrrrghay {
		if n_, err := v.MarshalCBOR(w); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}
	return n, nil
}

func (t *EmbeddingStructOne) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructOne{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 20 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.U8 (uint8) (uint8)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U8 = uint8(extra)
	// t.U16 (uint16) (uint16)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U16 = uint16(extra)
	// t.U32 (uint32) (uint32)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U32 = uint32(extra)
	// t.I8 (int8) (int8)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.I16 (int16) (int16)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16 = int16(extraI)
	}
	// t.I32 (int32) (int32)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32 = int32(extraI)
	}
	// t.Test ([][]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Test: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Test = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.ByteArrayMaxLen {
				return bytesRead, fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return bytesRead, fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Test[i] = make([]uint8, extra)
			}

			if read, err := io.ReadFull(br, t.Test[i][:]); err != nil {
				return bytesRead, err
			} else {
				bytesRead += read
			}
		}
	}

	// t.Dog (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Dog = string(sval)
	}
	// t.Numbers ([]testing.NamedNumber) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Numbers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Numbers = make([]testing.NamedNumber, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Numbers slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Numbers was not a uint, instead got %d", maj)
		}

		t.Numbers[i] = testing.NamedNumber(val)
	}

	// t.Pizza (uint64) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := uint64(extra)
			t.Pizza = &typed
		}

	}
	// t.PointyPizza (testing.NamedNumber) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := testing.NamedNumber(extra)
			t.PointyPizza = &typed
		}

	}
	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Arrrrrghay: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra != 3 {
		return bytesRead, fmt.Errorf("expected array to have 3 elements")
	}

	t.Arrrrrghay = [3]testing.SimpleTypeOne{}

	for i := 0; i < int(extra); i++ {

		var v testing.SimpleTypeOne
		if read, err := v.UnmarshalCBOR(br); err != nil {
			return bytesRead, err
		} else {
			bytesRead += read
		}

		t.Arrrrrghay[i] = v
	}

	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Stuff (testing.SimpleTypeTwo) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			t.Stuff = new(testing.SimpleTypeTwo)
			if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
				return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
			} else {
				bytesRead += read
			}
		}

	}
	// t.Others ([]uint64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Others = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
		}

		t.Others[i] = uint64(val)
	}

	// t.SignedOthers ([]int64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SignedOthers = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.SignedOthers[i] = int64(extraI)
		}
	}

	return bytesRead, nil
}

func (t *EmbeddingStructTwo) InitNilEmbeddedStruct() {
	if t != nil {
		if t.EmbeddingStructOne == nil {
			t.EmbeddingStructOne = &EmbeddingStructOne{}
		}
		t.EmbeddingStructOne.InitNilEmbeddedStruct()
	}
}

var lengthBufEmbeddingStructTwo = []byte{148}

func (t *EmbeddingStructTwo) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbeddingStructTwo); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U8 (uint8) (uint8)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U8)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U16 (uint16) (uint16)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U16)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U32 (uint32) (uint32)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U32)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I16 (int16) (int16)
	if t.I16 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I32 (int32) (int32)
	if t.I32 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Pizza (uint64) (uint64)

	if t.Pizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.Pizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.PointyPizza (testing.NamedNumber) (uint64)

	if t.PointyPizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.PointyPizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len(t.Arrrrrghay) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Arrrrrghay was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Arrrrrghay))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Arrrrrghay {
		if n_, err := v.MarshalCBOR(w); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}

	// t.Test ([][]uint8) (slice)
	if len(t.Test) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Test was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Test))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Test {
		if len(v) > cbg.ByteArrayMaxLen {
			return n, xerrors.Errorf("Byte array in field v was too long")
		}

		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return n + n_, err
		} else {
			n += n_
		}

		if n_, err := w.Write(v[:]); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Dog (string) (string)
	if len(t.Dog) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Dog was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Dog))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Dog)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len(t.Numbers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Numbers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Numbers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Numbers {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}
	return n, nil
}

func (t *EmbeddingStructTwo) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructTwo{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 20 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.U8 (uint8) (uint8)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U8 = uint8(extra)
	// t.U16 (uint16) (uint16)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U16 = uint16(extra)
	// t.U32 (uint32) (uint32)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U32 = uint32(extra)
	// t.I8 (int8) (int8)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.I16 (int16) (int16)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16 = int16(extraI)
	}
	// t.I32 (int32) (int32)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32 = int32(extraI)
	}
	// t.Pizza (uint64) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := uint64(extra)
			t.Pizza = &typed
		}

	}
	// t.PointyPizza (testing.NamedNumber) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := testing.NamedNumber(extra)
			t.PointyPizza = &typed
		}

	}
	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Arrrrrghay: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra != 3 {
		return bytesRead, fmt.Errorf("expected array to have 3 elements")
	}

	t.Arrrrrghay = [3]testing.SimpleTypeOne{}

	for i := 0; i < int(extra); i++ {

		var v testing.SimpleTypeOne
		if read, err := v.UnmarshalCBOR(br); err != nil {
			return bytesRead, err
		} else {
			bytesRead += read
		}

		t.Arrrrrghay[i] = v
	}

	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	// t.Stuff (testing.SimpleTypeTwo) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			t.Stuff = new(testing.SimpleTypeTwo)
			if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
				return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
			} else {
				bytesRead += read
			}
		}

	}
	// t.Others ([]uint64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Others = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
		}

		t.Others[i] = uint64(val)
	}

	// t.SignedOthers ([]int64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SignedOthers = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.SignedOthers[i] = int64(extraI)
		}
	}

	// t.Test ([][]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Test: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Test = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.ByteArrayMaxLen {
				return bytesRead, fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return bytesRead, fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Test[i] = make([]uint8, extra)
			}

			if read, err := io.ReadFull(br, t.Test[i][:]); err != nil {
				return bytesRead, err
			} else {
				bytesRead += read
			}
		}
	}

	// t.Dog (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Dog = string(sval)
	}
	// t.Numbers ([]testing.NamedNumber) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Numbers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Numbers = make([]testing.NamedNumber, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Numbers slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Numbers was not a uint, instead got %d", maj)
		}

		t.Numbers[i] = testing.NamedNumber(val)
	}

	return bytesRead, nil
}

func (t *EmbeddingStructThree) InitNilEmbeddedStruct() {
	if t != nil {
		if t.EmbeddingStructTwo == nil {
			t.EmbeddingStructTwo = &EmbeddingStructTwo{}
		}
		t.EmbeddingStructTwo.InitNilEmbeddedStruct()
	}
}

var lengthBufEmbeddingStructThree = []byte{148}

func (t *EmbeddingStructThree) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbeddingStructThree); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U8 (uint8) (uint8)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U8)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U16 (uint16) (uint16)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U16)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.U32 (uint32) (uint32)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.U32)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.I8 (int8) (int8)
	if t.I8 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I8)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I8-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I16 (int16) (int16)
	if t.I16 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I16)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I16-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.I32 (int32) (int32)
	if t.I32 >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.I32)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.I32-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Stuff (testing.SimpleTypeTwo) (struct)
	if n_, err := t.Stuff.MarshalCBOR(w); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Others ([]uint64) (slice)
	if len(t.Others) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Others was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Others))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Others {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.SignedOthers ([]int64) (slice)
	if len(t.SignedOthers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.SignedOthers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.SignedOthers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.SignedOthers {
		if v >= 0 {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(v)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		} else {
			if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-v-1)); err != nil {
				return n + n_, err
			} else {
				n += n_
			}
		}
	}

	// t.Test ([][]uint8) (slice)
	if len(t.Test) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Test was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Test))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Test {
		if len(v) > cbg.ByteArrayMaxLen {
			return n, xerrors.Errorf("Byte array in field v was too long")
		}

		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(v))); err != nil {
			return n + n_, err
		} else {
			n += n_
		}

		if n_, err := w.Write(v[:]); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Dog (string) (string)
	if len(t.Dog) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Dog was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Dog))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Dog)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Numbers ([]testing.NamedNumber) (slice)
	if len(t.Numbers) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Numbers was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Numbers))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Numbers {
		if n_, err := cbg.CborWriteHeader(w, cbg.MajUnsignedInt, uint64(v)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Pizza (uint64) (uint64)

	if t.Pizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.Pizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.PointyPizza (testing.NamedNumber) (uint64)

	if t.PointyPizza == nil {
		if n_, err := w.Write(cbg.CborNull); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(*t.PointyPizza)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)
	if len(t.Arrrrrghay) > cbg.MaxLength {
		return n, xerrors.Errorf("Slice value in field t.Arrrrrghay was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajArray, uint64(len(t.Arrrrrghay))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	for _, v := range t.Arrrrrghay {
		if n_, err := v.MarshalCBOR(w); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}
	return n, nil
}

func (t *EmbeddingStructThree) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddingStructThree{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 20 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.U8 (uint8) (uint8)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U8 = uint8(extra)
	// t.U16 (uint16) (uint16)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U16 = uint16(extra)
	// t.U32 (uint32) (uint32)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint64 field")
	}
	if extra > math.MaxUint64 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint64 field")
	}
	t.U32 = uint32(extra)
	// t.I8 (int8) (int8)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I8 = int8(extraI)
	}
	// t.I16 (int16) (int16)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I16 = int16(extraI)
	}
	// t.I32 (int32) (int32)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.I32 = int32(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Stuff (testing.SimpleTypeTwo) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			t.Stuff = new(testing.SimpleTypeTwo)
			if read, err := t.Stuff.UnmarshalCBOR(br); err != nil {
				return bytesRead, xerrors.Errorf("unmarshaling t.Stuff pointer: %w", err)
			} else {
				bytesRead += read
			}
		}

	}
	// t.Others ([]uint64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Others: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Others = make([]uint64, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Others slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Others was not a uint, instead got %d", maj)
		}

		t.Others[i] = uint64(val)
	}

	// t.SignedOthers ([]int64) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.SignedOthers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.SignedOthers = make([]int64, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
			var extraI int64
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			switch maj {
			case cbg.MajUnsignedInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 positive overflow")
				}
			case cbg.MajNegativeInt:
				extraI = int64(extra)
				if extraI < 0 {
					return bytesRead, fmt.Errorf("int64 negative oveflow")
				}
				extraI = -1 - extraI
			default:
				return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
			}

			t.SignedOthers[i] = int64(extraI)
		}
	}

	// t.Test ([][]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Test: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Test = make([][]uint8, extra)
	}

	for i := 0; i < int(extra); i++ {
		{
			var maj byte
			var extra uint64
			var err error

			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read

			if extra > cbg.ByteArrayMaxLen {
				return bytesRead, fmt.Errorf("t.Test[i]: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return bytesRead, fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Test[i] = make([]uint8, extra)
			}

			if read, err := io.ReadFull(br, t.Test[i][:]); err != nil {
				return bytesRead, err
			} else {
				bytesRead += read
			}
		}
	}

	// t.Dog (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Dog = string(sval)
	}
	// t.Numbers ([]testing.NamedNumber) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Numbers: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra > 0 {
		t.Numbers = make([]testing.NamedNumber, extra)
	}

	for i := 0; i < int(extra); i++ {

		maj, val, read, err := cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, xerrors.Errorf("failed to read uint64 for t.Numbers slice: %w", err)
		}
		bytesRead += read

		if maj != cbg.MajUnsignedInt {
			return bytesRead, xerrors.Errorf("value read for array t.Numbers was not a uint, instead got %d", maj)
		}

		t.Numbers[i] = testing.NamedNumber(val)
	}

	// t.Pizza (uint64) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := uint64(extra)
			t.Pizza = &typed
		}

	}
	// t.PointyPizza (testing.NamedNumber) (uint64)

	{

		b, err := br.ReadByte()
		if err != nil {
			return bytesRead, err
		}
		bytesRead++
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return bytesRead, err
			}
			bytesRead--
			maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return bytesRead, err
			}
			bytesRead += read
			if maj != cbg.MajUnsignedInt {
				return bytesRead, fmt.Errorf("wrong type for uint64 field")
			}
			typed := testing.NamedNumber(extra)
			t.PointyPizza = &typed
		}

	}
	// t.Arrrrrghay ([3]testing.SimpleTypeOne) (array)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.MaxLength {
		return bytesRead, fmt.Errorf("t.Arrrrrghay: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("expected cbor array")
	}

	if extra != 3 {
		return bytesRead, fmt.Errorf("expected array to have 3 elements")
	}

	t.Arrrrrghay = [3]testing.SimpleTypeOne{}

	for i := 0; i < int(extra); i++ {

		var v testing.SimpleTypeOne
		if read, err := v.UnmarshalCBOR(br); err != nil {
			return bytesRead, err
		} else {
			bytesRead += read
		}

		t.Arrrrrghay[i] = v
	}

	return bytesRead, nil
}

func (t *FlatStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufFlatStruct = []byte{133}

func (t *FlatStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufFlatStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *FlatStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = FlatStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}

func (t *EmbeddedStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufEmbeddedStruct = []byte{131}

func (t *EmbeddedStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbeddedStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *EmbeddedStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbeddedStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	return bytesRead, nil
}

func (t *EmbedByValueStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufEmbedByValueStruct = []byte{133}

func (t *EmbedByValueStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbedByValueStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *EmbedByValueStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbedByValueStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}

func (t *EmbedByPointerStruct) InitNilEmbeddedStruct() {
	if t != nil {
		if t.EmbeddedStruct == nil {
			t.EmbeddedStruct = &EmbeddedStruct{}
		}
		t.EmbeddedStruct.InitNilEmbeddedStruct()
	}
}

var lengthBufEmbedByPointerStruct = []byte{133}

func (t *EmbedByPointerStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufEmbedByPointerStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *EmbedByPointerStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = EmbedByPointerStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}
