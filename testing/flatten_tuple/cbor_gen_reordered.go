// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package flatten_tuple

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	testing "github.com/daotl/cbor-gen/testing"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ReorderedFlatStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufReorderedFlatStruct = []byte{133}

func (t *ReorderedFlatStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufReorderedFlatStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *ReorderedFlatStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = ReorderedFlatStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}

func (t *ReorderedEmbedByValueStruct) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufReorderedEmbedByValueStruct = []byte{133}

func (t *ReorderedEmbedByValueStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufReorderedEmbedByValueStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *ReorderedEmbedByValueStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = ReorderedEmbedByValueStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}

func (t *ReorderedEmbedByPointerStruct) InitNilEmbeddedStruct() {
	if t != nil {
		if t.EmbeddedStruct == nil {
			t.EmbeddedStruct = &EmbeddedStruct{}
		}
		t.EmbeddedStruct.InitNilEmbeddedStruct()
	}
}

var lengthBufReorderedEmbedByPointerStruct = []byte{133}

func (t *ReorderedEmbedByPointerStruct) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufReorderedEmbedByPointerStruct); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Signed (int64) (int64)
	if t.Signed >= 0 {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Signed)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	} else {
		if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.Signed-1)); err != nil {
			return n + n_, err
		} else {
			n += n_
		}
	}

	// t.Foo (string) (string)
	if len(t.Foo) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.Foo was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Foo))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.Foo)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Binary ([]uint8) (slice)
	if len(t.Binary) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Binary was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Binary))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Binary[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.NString (testing.NamedString) (string)
	if len(t.NString) > cbg.MaxLength {
		return n, xerrors.Errorf("Value in field t.NString was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.NString))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	if n_, err := io.WriteString(w, string(t.NString)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Value (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Value)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	return n, nil
}

func (t *ReorderedEmbedByPointerStruct) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = ReorderedEmbedByPointerStruct{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 5 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Signed (int64) (int64)
	{
		maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
		var extraI int64
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		switch maj {
		case cbg.MajUnsignedInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 positive overflow")
			}
		case cbg.MajNegativeInt:
			extraI = int64(extra)
			if extraI < 0 {
				return bytesRead, fmt.Errorf("int64 negative oveflow")
			}
			extraI = -1 - extraI
		default:
			return bytesRead, fmt.Errorf("wrong type for int64 field: %d", maj)
		}

		t.Signed = int64(extraI)
	}
	// t.Foo (string) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.Foo = string(sval)
	}
	// t.Binary ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Binary: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Binary = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Binary[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.NString (testing.NamedString) (string)

	{
		sval, read, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read

		t.NString = testing.NamedString(sval)
	}
	// t.Value (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Value = uint64(extra)

	}
	return bytesRead, nil
}
